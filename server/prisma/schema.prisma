generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  hash            String
  accountTypes    AccountType @relation(fields: [accountType], references: [id])
  accountType     Int
  categories      Category?   @relation(fields: [authCategory], references: [id])
  authCategory    Int?
  trainee         Trainee?    
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  updatedAt       DateTime    @default(now()) @db.Timestamp(6)
  trainings       TrainingProvided[]
}

model TrainingProvided {
  id            Int       @id @default(autoincrement())
  users          User      @relation(fields: [user], references: [id])
  user        Int
  requirements  Requirement @relation(fields: [requirement], references: [id])
  requirement   Int
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
}

model AccountType {
  id            Int   @id @default(autoincrement())
  name          String
  users         User[]
}

model Trainee {
  id            Int       @id @default(autoincrement())
  callsign      String?
  categories    Category  @relation(fields: [category], references: [id])
  category      Int
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  users         User      @relation(fields: [user], references: [id])
  user          Int       @unique
  trainings     TraineeToTraining[]
  currencies    Currency[]
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String
  users     User[]
  trainees  Trainee[]
  requirements  CategoryToRequirement[]
}

model Requirement {
  id              Int     @id @default(autoincrement())
  name            String
  hasSeniority    Boolean @default(false)
  rehackPeriod    Int     @default(0)
  extensionPeriod Int
  seniorExtension Int?
  trainingsProvided TrainingProvided[]
  currencies      Currency[]
  categories      CategoryToRequirement[]
  trainings       Training[]
}

model Currency {
  id            Int       @id @default(autoincrement())
  trainees      Trainee   @relation(fields: [trainee], references: [id])
  trainee       Int
  requirements  Requirement @relation(fields: [requirement], references: [id])
  requirement   Int
  seniority     Boolean
  expiry        DateTime
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
}

model CategoryToRequirement {
  id            Int       @id @default(autoincrement())
  categories    Category  @relation(fields: [category], references: [id])
  category      Int
  requirements  Requirement @relation(fields: [requirement], references: [id])
  requirement   Int
}

model Training {
  id            Int       @id @default(autoincrement())
  requirements  Requirement @relation(fields: [requirement], references: [id])
  requirement   Int
  capacity      Int
  start         DateTime
  end           DateTime
  complete      Boolean
  instruction   String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  trainees      TraineeToTraining[]
}

model TraineeToTraining {
  id            Int       @id @default(autoincrement())
  trainees      Trainee   @relation(fields: [trainee], references: [id])
  trainee       Int
  trainings     Training  @relation(fields: [training], references: [id])
  training      Int
  statuses      Status    @relation(fields: [status], references: [id])
  status        Int    
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
}

model Status {
  id        Int   @id @default(autoincrement())
  name      String
  bookings  TraineeToTraining[]
}

